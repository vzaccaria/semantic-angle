// Generated by LiveScript 1.2.0
(function(){
  var buildDir, deployClientDir, path, fs, _, npmTasks, loadNpmTasks, destinationCurried, destination, destinationCss, destinationHtml, deployRelPath, getConfigTarget, addItToJs, addItToCss, addItToHtml, subTargets, initLocalConfig, concatJsInto, concatCssInto, uglifyJsInto;
  buildDir = "./build";
  deployClientDir = "./public";
  path = require('path');
  fs = require('fs');
  _ = require('underscore');
  npmTasks = ['grunt-livescript', 'grunt-contrib-copy', 'grunt-contrib-clean', 'grunt-contrib-concat', 'grunt-contrib-uglify', 'grunt-contrib-less', 'grunt-contrib-coffee', 'grunt-contrib-jade', 'grunt-contrib-imagemin', 'grunt-contrib-connect', 'grunt-contrib-compress', 'grunt-exec', 'grunt-concurrent', 'grunt-cafe-mocha', 'grunt-contrib-watch', 'grunt-notify', 'grunt-nodemon', 'grunt-browserify'];
  loadNpmTasks = function(grunt){
    var i$, ref$, len$, t, results$ = [];
    for (i$ = 0, len$ = (ref$ = npmTasks).length; i$ < len$; ++i$) {
      t = ref$[i$];
      results$.push(grunt.loadNpmTasks(t));
    }
    return results$;
  };
  destinationCurried = curry$(function(destext, name, extension){
    return buildDir + "/" + path.basename(name, extension) + destext;
  });
  destination = destinationCurried('js');
  destinationCss = destinationCurried('css');
  destinationHtml = destinationCurried('html');
  deployRelPath = function(name, extension, subdir){
    return path.basename(name, extension) + "js";
  };
  getConfigTarget = function(f, config){
    switch (false) {
    case f.type !== 'ls':
      return config.livescript.build;
    case f.type !== 'coffee':
      return config.coffeescript.build;
    case f.type !== 'js':
      return config.copy.buildjs;
    case f.type !== 'less':
      return config.less.build;
    case f.type !== 'css':
      return config.copy.buildcss;
    case f.type !== 'html':
      return config.copy.buildcss;
    case f.type !== 'jade':
      return config.jade.build;
    default:
      throw "Unknown type!";
    }
  };
  addItToJs = function(f, config){
    var cc;
    cc = getConfigTarget(f, config);
    return cc.files[destination(f.name, f.type)] = f.name;
  };
  addItToCss = function(f, config){
    var cc;
    cc = getConfigTarget(f, config);
    return cc.files[destinationCss(f.name, f.type)] = f.name;
  };
  addItToHtml = function(f, config){
    var cc;
    cc = getConfigTarget(f, config);
    return cc.files[destinationHtml(f.name, f.type)] = f.name;
  };
  subTargets = function(){
    var x, args, i$, len$, y;
    x = {};
    args = arguments;
    for (i$ = 0, len$ = args.length; i$ < len$; ++i$) {
      y = args[i$];
      x[y] = {
        files: {}
      };
    }
    return x;
  };
  initLocalConfig = function(files, pkg){
    var config, ref$;
    config = {};
    config.livescript = subTargets('build');
    config.copy = subTargets('build', 'buildjs', 'buildcss', 'deploy', 'fonts', 'browserified');
    config.concat = subTargets('build', 'buildjs', 'buildcss');
    config.uglify = subTargets('build');
    config.less = subTargets('build');
    config.uglify.options = {
      report: 'min'
    };
    config.less.options = {
      report: 'min',
      compress: true
    };
    config.jade = subTargets('build');
    config.exec = {};
    config.imagemin = {};
    if (((ref$ = files.options) != null ? ref$.deployClientDir : void 8) != null) {
      deployClientDir = (ref$ = files.options) != null ? ref$.deployClientDir : void 8;
    }
    if (((ref$ = files.options) != null ? ref$.buildDir : void 8) != null) {
      buildDir = (ref$ = files.options) != null ? ref$.buildDir : void 8;
    }
    _.extend(config, files.options);
    return config;
  };
  concatJsInto = function(files, dest, config){
    var c, i$, len$, f;
    if (files != null) {
      c = [];
      for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
        f = files[i$];
        if ((f.brfy == null || !f.brfy) && (f.brfyDep == null || !f.brfyDep)) {
          c.push(destination(f.name, f.type));
        }
      }
      return config.concat.buildjs.files[dest] = c;
    }
  };
  concatCssInto = function(files, dest, config){
    var f;
    if (files != null) {
      return config.concat.buildcss.files[dest] = (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = files).length; i$ < len$; ++i$) {
          f = ref$[i$];
          results$.push(destinationCss(f.name, f.type));
        }
        return results$;
      }());
    }
  };
  uglifyJsInto = function(files, dest, config){
    var f;
    if (files != null) {
      return config.uglify.build.files[dest] = (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = files).length; i$ < len$; ++i$) {
          f = ref$[i$];
          results$.push(destination(f.name, f.type));
        }
        return results$;
      }());
    }
  };
  module.exports = function(grunt){
    var data, files, pack, config, i$, ref$, len$, f, x$, b, x;
    data = fs.readFileSync('.grunt/config.json', 'utf-8');
    files = JSON.parse(data);
    pack = require("../package.json");
    loadNpmTasks(grunt);
    config = initLocalConfig(files, pack);
    if (files.clientJs != null) {
      for (i$ = 0, len$ = (ref$ = files.clientJs).length; i$ < len$; ++i$) {
        f = ref$[i$];
        addItToJs(f, config);
      }
    }
    if (files.vendorJs != null) {
      for (i$ = 0, len$ = (ref$ = files.vendorJs).length; i$ < len$; ++i$) {
        f = ref$[i$];
        addItToJs(f, config);
      }
    }
    if (files.clientCss != null) {
      for (i$ = 0, len$ = (ref$ = files.clientCss).length; i$ < len$; ++i$) {
        f = ref$[i$];
        addItToCss(f, config);
      }
    }
    if (files.clientHtml) {
      for (i$ = 0, len$ = (ref$ = files.clientHtml).length; i$ < len$; ++i$) {
        f = ref$[i$];
        addItToHtml(f, config);
      }
    }
    concatJsInto(files.clientJs, buildDir + "/client.js", config);
    concatJsInto(files.vendorJs, buildDir + "/vendor.js", config);
    concatCssInto(files.clientCss, buildDir + "/client.css", config);
    uglifyJsInto(files.clientJs, buildDir + "/client.min.js", config);
    uglifyJsInto(files.vendorJs, buildDir + "/vendor.min.js", config);
    config.clean = {
      build: [buildDir],
      deploy: [buildDir, deployClientDir]
    };
    config.copy.js = {
      files: (ref$ = {}, ref$[deployClientDir + "/js/client.js"] = buildDir + "/client.js", ref$[deployClientDir + "/js/client.min.js"] = buildDir + "/client.min.js", ref$[deployClientDir + "/js/vendor.js"] = buildDir + "/vendor.js", ref$[deployClientDir + "/js/vendor.min.js"] = buildDir + "/vendor.min.js", ref$[deployClientDir + "/css/client.css"] = buildDir + "/client.css", ref$)
    };
    config.copy.views = {
      expand: true,
      cwd: buildDir + "/",
      src: ["*.html"],
      dest: deployClientDir + "/html/"
    };
    config.copy.root = {
      expand: true,
      cwd: buildDir + "/",
      src: ["index.html"],
      dest: deployClientDir + "/"
    };
    config.copy.fonts = {};
    config.copy.fonts.files = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = files.clientFonts).length; i$ < len$; ++i$) {
        f = ref$[i$];
        results$.push({
          expand: true,
          cwd: f['in'] + "/",
          src: ["*." + f.filesOfType],
          dest: deployClientDir + "/fonts/"
        });
      }
      return results$;
    }());
    config.imagemin.assets = {};
    config.imagemin.assets.files = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = files.clientImg).length; i$ < len$; ++i$) {
        f = ref$[i$];
        results$.push({
          expand: true,
          cwd: f['in'] + "/",
          src: ["*." + f.filesOfType],
          dest: deployClientDir + "/img/"
        });
      }
      return results$;
    }());
    if (files.favicon != null) {
      config.copy.favicon = {};
      config.copy.favicon.files = (ref$ = {}, ref$[deployClientDir + "/favicon.ico"] = files.favicon.name, ref$);
    }
    config.watch = subTargets('clientjs', 'clientcss', 'livereload');
    config.watch.clientjs.files = [];
    config.watch.clientjs.tasks = ['compile', 'copy:assets'];
    for (i$ = 0, len$ = (ref$ = files.clientJs).length; i$ < len$; ++i$) {
      f = ref$[i$];
      config.watch.clientjs.files.push(f.name);
    }
    config.watch.clientcss.files = [];
    config.watch.clientcss.tasks = ['compile', 'copy:assets'];
    for (i$ = 0, len$ = (ref$ = files.clientCss.concat(files.clientHtml)).length; i$ < len$; ++i$) {
      f = ref$[i$];
      config.watch.clientcss.files.push(f.name);
    }
    config.watch.livereload.options = {
      livereload: 1973,
      interval: 3000
    };
    config.watch.livereload.files = [deployClientDir + "/js/client.js", deployClientDir + "/js/vendor.js", deployClientDir + "/**/*.html"];
    x$ = config.connect = {};
    x$.server = {
      options: {
        port: 9000,
        base: 'public'
      }
    };
    b = [];
    for (i$ = 0, len$ = (ref$ = files.clientJs).length; i$ < len$; ++i$) {
      f = ref$[i$];
      if (f.brfy != null && f.brfy === true) {
        b.push(destination(f.name, f.type));
      }
    }
    config.browserify = subTargets('build');
    config.browserify.build.files = (ref$ = {}, ref$[buildDir + "/browserified.js"] = b, ref$);
    config.copy.browserified.files = [(ref$ = {}, ref$[deployClientDir + "/js/browserified.js"] = buildDir + "/browserified.js", ref$)];
    config.compress = {
      main: {
        options: {
          mode: 'gzip'
        },
        files: [
          {
            expand: true,
            src: [deployClientDir + "/js/*.js"],
            dest: [deployClientDir + "/js"]
          }, {
            expand: true,
            src: [deployClientDir + "/css/*.css"],
            dest: [deployClientDir + "/css"]
          }
        ]
      }
    };
    grunt.initConfig(config);
    x = grunt.registerTask;
    x('compile:js', ['livescript', 'copy:buildjs', 'concat:buildjs']);
    x('compile:views', ['jade', 'less', 'copy:buildcss', 'concat:buildcss']);
    x('compile', ['compile:js', 'compile:views']);
    x('copy:assets', ['copy:js', 'copy:views', 'copy:root', 'copy:fonts', 'imagemin']);
    x('deploy', ['clean', 'compile', 'copy:assets', 'browserify', 'copy:browserified']);
    x('deploy-production', ['clean', 'compile', 'uglify', 'copy:assets', 'browserify', 'copy:browserified', 'compress']);
    x('default', ['deploy']);
    x('dev', ['deploy', 'connect:server', 'watch']);
    return x('test-production', ['deploy-production', 'connect:server', 'watch']);
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
